//ќпределите структуру Ђ—тудентї со следующими пол€ми : им€, фамили€, день, мес€ц и год рождени€.—оздайте вектор из таких структур, заполните его из входных данных и затем по запросам выведите нужные пол€.„тение и запись данных в этой задаче производитс€ с использованием стандартных потоков.
//
//‘ормат ввода
//
//ѕерва€ строка содержит одно целое число N от 0 до 10000 Ч число студентов.
//
//ƒалее идут N строк, кажда€ из которых содержит две строки длиной от 1 до 15 символов Ч 
//им€ и фамилию очередного студента, и три целых числа от 0 до 1000000000 Ч день, мес€ц и год рождени€.
//
//—ледующа€ строка содержит одно целое число M от 0 до 10000 Ч число запросов.
//
//—ледующие M строк содержат строку длиной от 1 до 15 символов Ч запрос, 
//и целое число от 1 до 1000000000 Ч номер студента(нумераци€ начинаетс€ с 1).
//
//‘ормат вывода
//
//ƒл€ запроса вида name K, где K от 1 до N, выведите через пробел им€ и фамилию K - го студента.
//
//ƒл€ запроса вида date K, где K от 1 до N, выведите через точку день, мес€ц и 
//год рождени€ K - го студента.
//
//ƒл€ остальных запросов выведите bad request.
//
//NB: неверные запросы могут выходить за границы, указанные дл€ данных.

#include <iostream>
#include <fstream>
#include <string>
#include <iomanip>
#include <map>
#include <vector>

using namespace std;

struct Student {
    string first_name;
    string last_name;

    int day;
    int month;
    int year;
};

int main() {
    int n;
    cin >> n;

    string first_name, last_name;
    int day, month, year;
    vector<Student> students;

    for (size_t i = 0; i < n; ++i) {
        cin >> first_name >> last_name >> day >> month >> year;

        students.push_back(Student{
          first_name,
          last_name,
          day,
          month,
          year
            });
    }

    int m;
    cin >> m;
    string query;
    int student_number;

    for (int i = 0; i < m; ++i) {
        cin >> query >> student_number;
        --student_number;

        if (query == "name" && student_number >= 0 && student_number < n) {
            cout << students[student_number].first_name << " "
                << students[student_number].last_name << endl;
        }
        else if (query == "date" && student_number >= 0 && student_number < n) {
            cout << students[student_number].day << "."
                << students[student_number].month << "."
                << students[student_number].year << endl;
        }
        else {
            cout << "bad request" << endl;
        }
    }

    return 0;
}