//Вам нужно реализовать работу со списком таких дел на месяц, а именно, реализовать набор следующих операций :
//ADD i s
//Назначить дело с названием s на день i текущего месяца.

//DUMP i
//Вывести все дела, запланированные на день i текущего месяца.

//NEXT
//Перейти к списку дел на новый месяц.
//При выполнении данной команды вместо текущего(старого) 
//списка дел на текущий месяц создаётся и становится активным(новый) 
//список дел на следующий месяц : все дела со старого списка дел копируются в новый список.
//После выполнения данной команды новый список дел и следующий месяц становятся текущими, 
//а работа со старым списком дел прекращается.
//При переходе к новому месяцу необходимо обратить внимание на разное количество дней в месяцах :
//если следующий месяц имеет больше дней, чем текущий, «дополнительные» дни необходимо оставить 
//пустыми(не содержащими дел);
//если следующий месяц имеет меньше дней, чем текущий, дела со всех «лишних» дней необходимо переместить 
//на последний день следующего месяца.
//
//Замечания
//
//Историю списков дел хранить не требуется, работа ведется только с текущим списком дел текущего месяца.
//Более того, при создании списка дел на следующий месяц, он «перетирает» предыдущий список.
//Обратите внимание, что количество команд NEXT в общей последовательности команд при работе 
//со списком дел может превышать 11.
//Начальным текущим месяцем считается январь.
//Количества дней в месяцах соответствуют Григорианскому календарю с той лишь разницей, 
//что в феврале всегда 28 дней.
//
//Формат ввода
//
//Сначала число операций Q, затем описания операций.
//
//Названия дел s уникальны и состоят только из латинских букв, цифр и символов подчёркивания.
//Номера дней i являются целыми числами и нумеруются от 1 до размера текущего месяца.
//Формат вывода
//
//Для каждой операции типа DUMP в отдельной
//строке выведите количество дел в соответствующий день, а затем их названия, разделяя их пробелом.
//Порядок вывода дел в рамках каждой операции значения не имеет.

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

void printVector(const vector<string> v)
{
    for (auto &el : v)
        cout << el << " ";
}

int main() 
{
    int q;
    cin >> q;

    vector<int> day_in_months = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
    int current_month = 0;

    vector<vector<string>> tasks;

    tasks.resize(31);

    for (int i = 0; i < q; ++i) 
    {
        string cmd;
        cin >> cmd;

        if (cmd == "DUMP") 
        {       
            int day;
            cin >> day;
            day -= 1;
            if (day < tasks.size())
            {                
                cout << tasks[day].size() << " ";
                printVector(tasks[day]);
                cout << endl;
            }                            
        }
        else 
        {
            if (cmd == "ADD")
            {
                int day;
                cin >> day;
                day -= 1;               

                string task;
                cin >> task;

                if (day < tasks.size())
                    tasks[day].push_back(task);
            }
            else if (cmd == "NEXT") 
            {
                int current_count = day_in_months[current_month];
                current_month++;
                if (current_month >= 12)
                    current_month %= 12;

                int next_count = day_in_months[current_month];                
                
                if (current_count > next_count)
                {                    
                    for (int i = next_count; i < current_count; i++)
                    {
                        tasks[next_count - 1].insert(end(tasks[next_count-1]), begin(tasks[i]), end(tasks[i]));
                    }                    
                }    
                tasks.resize(next_count);
            }
        }
    }

    return 0;
}